

generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/prisma"
  previewFeatures = ["strictUndefinedChecks", "driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Classified {
    id             Int              @id @default(autoincrement())
    views          Int              @default(0)
    slug           String           @unique
    vrm            String?
    title          String?
    description    String?
    year           Int
    odoReading     Int              @default(0) @map("odo_reading")
    doors          Int              @default(2)
    seats          Int              @default(5)
    price          Int              @default(0) @map("price")
    make           Make             @relation(fields: [makeId], references: [id])
    makeId         Int              @map("make_id")
    modelId        Int              @map("model_id")
    modelVariantId Int              @map("model_variant_id")
    modelVariant   ModelVariant?    @relation(fields: [modelVariantId], references: [id])
    ulezCompliance ULEZCompliance   @default(EXEMPT)
    transmission   Transmission     @default(MANUAL)
    colour         Colour           @default(BLACK)
    status         ClassifiedStatus @default(LIVE)
    fuelType       FuelType         @default(PETROL)
    bodyType       BodyType         @default(SEDAN)
    odoUnit        OdoUnit          @default(MILES)
    currency       CurrencyCode     @default(GBP)
    images         Image[]
    customer       Customer[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([makeId, modelId], name: "index_make_model")
    @@index([status], name: "index_status")
    @@index([price], name: "index_price")
    @@map("classifieds")
    Model Model[]
}

enum ClassifiedStatus {
    LIVE
    DRAFT
    SOLD
}

enum ULEZCompliance {
    EXEMPT
    NON_EXEMPT
}

enum OdoUnit {
    MILES
    KILOMETERS
}

enum CurrencyCode {
    GBP
    EUR
    USD
}

enum BodyType {
    SEDAN
    HATCHBACK
    SUV
    COUPE
    CONVERTIBLE
    WAGON
}

enum FuelType {
    PETROL
    DIESEL
    ELECTRIC
    HYBRID
}

enum Transmission {
    MANUAL
    AUTOMATIC
}

enum Colour {
    BLACK
    BLUE
    BROWN
    GREEN
    GREY
    ORANGE
    PINK
    PURPLE
    RED
    SILVER
    WHITE
    YELLOW
    GOLD
}

model CustomerLifeCycle {
    id         Int            @id @default(autoincrement())
    customerId Int            @map("customer_id")
    customer   Customer       @relation(fields: [customerId], references: [id], onDelete: Cascade)
    oldStatus  CustomerStatus @map("old_status")
    newStatus  CustomerStatus @map("new_status")
    createdAt  DateTime       @default(now()) @map("created_at")
    updatedAt  DateTime       @updatedAt @map("updated_at")


@@index([customerId, createdAt])
    @@map("customer_lifecycle")
}


model Customer {
    id            Int            @id @default(autoincrement())
    firstName     String         @map("first_name")
    lastName      String         @map("last_name")
    email         String         @unique
    mobile        String?
    bookingDate   DateTime?      @map("booking_date")
    termsAccepted Boolean        @default(false) @map("terms_accepted")
    status        CustomerStatus @default(INTERESTED)
    classifiedId  Int?           @map("classified_id")
    classified    Classified?    @relation(fields: [classifiedId], references: [id], onDelete: Cascade)
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt

    lifeCycle CustomerLifeCycle[]

    @@map("customers")
}

enum CustomerStatus {
    SUBSCRIBER
    INTERESTED
    CONTACTED
    PURCHASED
    COLD
}

model Image {
    id Int @id @default(autoincrement())
    alt String
    src String
    classifiedId Int @map("classified_id")
    classified Classified @relation(fields: [classifiedId], references: [id], onDelete: Cascade)
    blurhash String
    isMain Boolean @default(false) @map("is_main")

    @@map("images")
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    requires2FA  Boolean  @default(true)
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model Make {
    id          Int          @id @default(autoincrement())
    name        String       @unique
    image       String
    models      Model[]
    classifieds Classified[]
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt

    @@map("makes")
}

model Model {
    id            Int            @id @default(autoincrement())
    name          String
    makeId        Int            @map("make_id")
    make          Make           @relation(fields: [makeId], references: [id], onDelete: Cascade)
    modelVariants ModelVariant[]
    classifieds   Classified[]
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt

    @@unique([makeId, name])
    @@map("models")
}

model ModelVariant {
    id          Int          @id @default(autoincrement())
    name        String
    modelId     Int          @map("model_id")
    yearStart   Int
    yearEnd     Int
    model       Model        @relation(fields: [modelId], references: [id], onDelete: Cascade)
    classifieds Classified[]
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt

    @@unique([modelId, name])
    @@map("model_variants")
}

model User {
    id             String   @id @default(uuid())
    email          String   @unique
    hashedPassword String   @map("hashed_password")
    session        Session[]
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    @@map("users")
}






// 5433
// psql "postgres://postgres:temiloluwa@localhost:5432/cdw"
// cdw=# GRANT ALL PRIVILEGES ON SCHEMA public to postgres
// cdw-#  ALTER SCHEMA public OWNER to postgres
// cdw-# GRANT ALL ON SCHEMA public to postgres

